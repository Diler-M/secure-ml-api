name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# Default to no permissions; each job gets the minimum it needs
permissions: {}

jobs:
  # -------------------- SAST --------------------
  codeql-analysis:
    name: Perform CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: python
      - uses: github/codeql-action/analyze@v3

  # -------------------- SCA (Image + IaC) --------------------
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image for Trivy scan
        run: docker build -t secure-ml-api:latest .

      - name: Trivy (Image)
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: secure-ml-api:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

      - name: Trivy (Terraform IaC)
        uses: aquasecurity/trivy-action@0.12.0
        with:
          scan-type: fs
          scan-ref: terraform-deployment
          format: table
          exit-code: 0
          ignore-unfixed: true

  # -------------------- Dependency Review (PRs only) --------------------
  dependency-review:
    name: Dependency Review (PR gate)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          comment-summary-in-pr: true

  # -------------------- DAST --------------------
  zap-baseline-scan:
    name: OWASP ZAP Baseline Scan (Reports Only)
    runs-on: ubuntu-latest
    # IMPORTANT: depend only on jobs that always run on both push and PR
    needs: [codeql-analysis, trivy-scan]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Create Docker network & start API
        run: |
          docker network create zapnet || true
          docker build -t secure-ml-api .
          docker run -d --network zapnet --name api secure-ml-api
          echo "Waiting for API to start..."
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/docs >/dev/null; then
              echo "API is up"
              break
            fi
            sleep 2
          done

      - name: ZAP Baseline (same network, writeable reports)
        continue-on-error: true
        run: |
          mkdir -p zap-reports
          chmod 777 zap-reports
          docker run --rm \
            --network zapnet \
            -v "$PWD/zap-reports:/zap/wrk:rw" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
              -t http://api:8000 \
              -J zap-report.json \
              -w zap-report.md \
              -r zap-report.html \
              -a

      - name: Upload ZAP Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: zap-reports/*

      - name: Cleanup API container
        if: always()
        run: docker rm -f api || true

  # -------------------- Terraform Plan (runs last) --------------------
  terraform-plan:
    name: Terraform Plan (Review Only)
    runs-on: ubuntu-latest
    needs: [zap-baseline-scan]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      # âœ… configure AWS creds from repo secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=terraform-deployment init

      - name: Terraform Plan
        run: terraform -chdir=terraform-deployment plan
