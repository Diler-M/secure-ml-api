name: Secure ML API CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Prevent overlapping runs on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  pull-requests: read

jobs:
  # Lightweight sanity check of your FastAPI app across two Python versions
  python-smoke:
    name: Python Smoke (matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.11" ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          if [ -f app/requirements.txt ]; then pip install -r app/requirements.txt; fi
      - name: Import check
        run: |
          python - <<'PY'
          import importlib.util, sys
          spec = importlib.util.spec_from_file_location("app.main", "app/main.py")
          module = importlib.util.module_from_spec(spec)
          spec.loader.exec_module(module)
          print("Imported app.main successfully")
          PY

  codeql-analysis:
    name: CodeQL Analysis (SAST)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v2
        with:
          languages: python
      - uses: github/codeql-action/analyze@v2

  dependency-review:
    name: Dependency Review (PR Gate)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prep Trivy cache dir
        run: mkdir -p ~/.cache/trivy

      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db

      - name: Run Trivy scan on docker image (Dockerized)
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/.cache/trivy:/root/.cache/ \
            -v $(pwd):/workspace \
            aquasec/trivy:latest image \
              --format table \
              --output /workspace/trivy-results.txt \
              --pkg-types os,library \
              --severity HIGH,CRITICAL \
              --timeout 10m \
              ${{ secrets.DOCKERHUB_USERNAME }}/secure-ml-api:latest

      - name: Fix permissions for Trivy cache
        run: sudo chown -R $USER:$USER ~/.cache/trivy

      - name: Upload Trivy Scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-results.txt

  zap-scan:
    name: OWASP ZAP DAST
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Start API container (background)
        run: |
          docker run -d --name api -p 8000:8000 ${{ secrets.DOCKERHUB_USERNAME }}/secure-ml-api:latest
          # Wait until /docs returns 200 (max 60s)
          for i in {1..60}; do
            if curl -fsS http://localhost:8000/docs >/dev/null; then
              echo "API is up"
              break
            fi
            sleep 1
          done

      - name: Create report directory
        run: mkdir -p zap-reports

      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --rm --network=host \
            -v $(pwd)/zap-reports:/zap/wrk:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
              -t http://localhost:8000 \
              -I \
              -r zap-report.html \
              -J zap-report.json \
              -w zap-report.md || true

      - name: Stop API container
        if: always()
        run: docker rm -f api || true

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: zap-reports/*

  terraform-plan:
    name: Terraform Plan (Review Only)
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_allowed_cidr: ${{ secrets.ALLOWED_CIDR }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        working-directory: ./terraform-deployment
        run: terraform init
      - name: Terraform Plan
        working-directory: ./terraform-deployment
        run: terraform plan -out=tfplan
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform-deployment/tfplan
