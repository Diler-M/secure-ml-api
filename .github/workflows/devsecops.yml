name: Secure ML API CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Prevent overlapping runs on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  DOCKER_IMAGE: dilerm13/secure-ml-api:latest

permissions:
  contents: read
  security-events: write
  pull-requests: read

jobs:
  codeql-analysis:
    name: CodeQL Analysis (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  trivy-scan:
    name: Trivy Security Scan (TXT + HTML)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Optional: login if your image is private
      - name: Docker login (Docker Hub)
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull image to ensure it exists locally
        run: docker pull $DOCKER_IMAGE

      - name: Prep Trivy cache dir
        run: mkdir -p ~/.cache/trivy

      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db

      - name: Run Trivy scan (text)
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/.cache/trivy:/root/.cache/ \
            -v $(pwd):/workspace \
            aquasec/trivy:latest image \
              --format table \
              --output /workspace/trivy-results.txt \
              --pkg-types os,library \
              --severity HIGH,CRITICAL \
              --timeout 10m \
              $DOCKER_IMAGE

      - name: Run Trivy scan (HTML)
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/.cache/trivy:/root/.cache/ \
            -v $(pwd):/workspace \
            aquasec/trivy:latest image \
              --format template \
              --template "@contrib/html.tpl" \
              --output /workspace/trivy-results.html \
              --pkg-types os,library \
              --severity HIGH,CRITICAL \
              --timeout 10m \
              $DOCKER_IMAGE

      - name: Fix permissions for Trivy cache
        run: sudo chown -R $USER:$USER ~/.cache/trivy

      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-results.txt
            trivy-results.html

  zap-scan:
    name: OWASP ZAP Baseline (DAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker login (Docker Hub)
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Start API container (background)
        run: |
          docker run -d --name api -p 8000:8000 $DOCKER_IMAGE
          # wait until /docs returns HTTP 200 (max 60s)
          for i in {1..60}; do
            if curl -fsS http://localhost:8000/docs >/dev/null; then
              echo "API is up"
              break
            fi
            sleep 1
          done

      - name: Run OWASP ZAP Baseline
        run: |
          mkdir -p zap-reports
          chmod 777 zap-reports
          docker run --rm --network=host \
            -v $(pwd)/zap-reports:/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
              -t http://localhost:8000 \
              -I \
              -r zap-report.html \
              -J zap-report.json \
              -w zap-report.md || true

      - name: Stop API container
        if: always()
        run: docker rm -f api || true

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: zap-reports/*

  terraform-plan:
    name: Terraform Plan (Review Only â€” runs last)
    runs-on: ubuntu-latest
    needs:
      - codeql-analysis
      - trivy-scan
      - zap-scan
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_allowed_cidr: ${{ secrets.ALLOWED_CIDR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # Set the working directory to wherever your *.tf files live
      - name: Terraform Init
        working-directory: ./terraform-deployment
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform-deployment
        run: terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform-deployment/tfplan
